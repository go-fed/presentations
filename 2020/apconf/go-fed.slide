# Go-Fed: Past, Present, and Future
Making An ActivityPub Library
00:00 2 Oct 2020
Tags: golang, activitypub, fediverse, go-fed

Cory "CJ" Slep
Go-Fed
@cj@mastodon.technology
https://go-fed.org

: Author of go-fed
: go-fed is a suite of Fediverse libraries
: ActivityStreams, ActivityPub, HTTP Signatures
: Only talking about the "activity" library
: AS portions used in WriteFreely
: Other bots, small apps, etc

## Agenda

Building the [activity](https://github.com/go-fed/activity) library*

1. Past: Design Choices
2. Present: Building Apps
3. Future: Ecosystem Improvement

*not to be confused with [library.activitypub.dev](https://library.activitypub.dev/)

: Here to talk about quite a bit
: Want to build AS/AP library? Design choices
: Building an App? Where to find info how to, little peeks on how
: Interested in ecosystem future? My outlook
: Note I also have a non-technical library, not covered
: Technical, cultural, community blogposts there

## Prologue

: First, go in prepared

## Library Problems

ActivityStreams:

* JSON-LD Serialization / Deserialization
* Client API (golang)

ActivityPub:

* Peering protocol (HTTP)
* Client API (golang)
* Flexibility & Extendability

: Before diving in: Get ourselves into a library mindset, agnostic of language
: AS meaty bits: mapping types to a statically typed language
: ActivityStreams API design
: AP also has flexibility and extendability concerns

## Principles

* ActivityStreams & ActivityPub specs: no more, no less
* Strictly follow the spec, try to include as many SHOULDs*
* Extensible across Vocabularies
* Extensible across app behaviors
* Push as much work into the compiler as possible

*exception: `sharedInbox`

: Some principles to guide our design & thoughts
: 1 - Only AS & AP, lean & mean, composable, future-proof convention
: 2 - Strict, SHOULDS, minus shared inbox (skip)
: 3 - Support as many vocabularies - security, forgefed, valueflows
: 4 - Support as many app behaviors - make right thing easy
: 5 - Make machines work, feedback on invalid modeling

## Landed

.image go-fed-concepts.png _ 400

: Built up a series of subpackages to address different concepts
: They compose together or build off one another
: JSON-LD, AS, AP
: apcore addressed later

## Landed

* Vocabulary schemas
* Schema-understanding at code-generation time
* Do not process JSON-LD
* ActivityStreams supported as native Go types
* ActivityPub is middleware for HTTP handlers
* Composable with other libraries for HTTP Signatures

: Resulting library uses vocabulary schemas
: Schemas are used in code generation
: This is the extra unit of work for statically typed languages
: Lib neither processes/transforms JSON-LD
: Manipulating native Go types equiv AS types
: ActivityPub is middleware

## Past: Design Choices

: examine past library choices

## Past: Design Choices - ActivityStreams

: Let's dive into three meaty choices around
: ActivityStreams
: 1. Go language API - flexible
: 2. Wire ABI - fixed
: 3. Input Schema for Code Generation - flexible

## Go Language API: Native Go Types

An ActivityStreams `Note` type:

.code native_types.go /BEGIN NT1 OMIT/,/END NT1 OMIT/

An ActivityStreams `content` property:

.code native_types.go /BEGIN NT2 OMIT/,/END NT2 OMIT/

: ActivityStreams types map 1:1 to golang native types
: Same for properties.
: Non-functional properties vs Functional properties
: Property values could be a type, come full circle

## Native Go Types

Benefit of 1:1 mental mapping:

.code native_types_ex.go /BEGIN NT1 OMIT/,/END NT1A OMIT/ HLnote

Compile-time enforcement of schema:

.play native_types_noncompile.go /BEGIN NTN1 OMIT/,/END NTN1 OMIT/ HLerr

(Make computers work harder)

: Pro of 1:1 mental mapping: know exactly how types will be related to each other
: Compiler enforces the schema
: No different than mentally keeping track in dynamically-typed langs
: However, easy to get too carried away

## Native Go Types

Warning: ActivityStreams is **NOT** an Object Oriented hierarchy.

* `IntransitiveActivity` inherits all properties... except `object`
* `Ignore`, `Join`, etc: "No meaning" to some properties
* Mix & match: `Collection`/`OrderedCollection`, `items`/`orderedItems`

*"Every time an RDF schema is mapped to OO hierarchies a demon earns its horns." - Tutankhamun*

: OO is insufficient to specify AS schema
: Lib has every Go type independent of each other
: Properties are not guaranteed to be inherited: explicitly, implicitly, or TBD

## Go Language API: Lazy vs Immediate Evaluation

Fluent-like API with lazy evaluation...

.code fluent_ish.go /BEGIN FI1 OMIT/,/END FI1 OMIT/ HLctr

: Fluent/thin API seems appealing
: But defers too much (correctness, errors)
: Chaining of methods hard to do in golang
: Costs verbose golang err idiom
: Golang is not as good at streaming JSON, JSONLD

## Lazy vs Immediate Evaluation

 ...versus immediate parsing

.code fluent_ish.go /BEGIN FI2 OMIT/,/END FI2 OMIT/ HLctr

: Immediate parsing easier to reason about
: Use callback to structure behavior, functional programming
: Preserve "unknown" values that are well-formed
: Good to know invalid JSONLD up-front before expensive operations

## Go Language API: Solution

Solution: code-generate the types

Generated as interfaces: anyone can modify the code-generator to have their implementation.

: With these considerations, decided to code generate the Go types
: Generated as interfaces: odd request
: But, theoretically, anyone can generate their own impl

## Go Language API: ActivityStreams in Action

Getting a type:

.code native_types_ex.go /BEGIN NT1 OMIT/,/END NT1B OMIT/ HLnil
.code native_types_ex.go /BEGIN NT2 OMIT/,/END NT2 OMIT/
.code native_types_ex.go /BEGIN NT3 OMIT/,/END NT3 OMIT/
.play native_types_ex.go /BEGIN NT4 OMIT/,/END NT4 OMIT/ HLnil

: So what does deserialization look like in practice?
: Deserialize JSON per your library of choice to a generic map
: Prepare code-generated logic that knows how to interpret JSON-LD
: Give a callback for the types you are interested in - prep behaviors (closure)
: No different than dynamically typed languages (you're only pulling certain properties anyway)
: Run the bytes through the setup

## ActivityStreams in Action

Inspecting its properties:

.play native_types_ex2.go /BEGIN NTE1 OMIT/,/END NTE1 OMIT/

Go-fed forces you to reckon with the possibility of there being multiple values, always.

: Can go further: obtain a property and inspect it
: Go-fed always enforces your code to reckon with possibility of multiple values
: No laziness

## ActivityStreams in Action

multiple values of different kinds:

.code native_types_ex3.go /BEGIN NTE1 OMIT/,/END NTE1 OMIT/

(note the IDs and IRIs)

: Lets look at a multi-value multi-kind example
: (go through the ids/IRIs)

## ActivityStreams in Action

multiple values of different kinds:

.play native_types_ex3.go /BEGIN NTE2 OMIT/,/END NTE2 OMIT/ HLfmt

: First inspect the note ID
: Get the target
: Iterate through the values
: If IRI, print it
: Otherwise, test object if person, print its id
: Note: using a function to help navigate RDF tree (no OO inheritance test)

## Wire ABI: Code Generation

When generating code we must remain byte-wire compatible: JSON-LD.

Immediately, non-solutions:

* protobufs
* capn proto
* etc

: Must send JSON-LD on the wire for peers to understand
: cannot send anything else
: protobufs and pals not solutions

## Code Generation

Why not these?

* They put bytes on the wire that are not JSON-LD
* Their schema specifications are too restricting (neither RDF/triples)
* They drop unknown/extension fields (proto v3.5 and before)
* Representation of multi-value multi-kind (array & one-of) inadequate

Unknown extension fields SHOULD be kept ([AS Core 3.5](https://www.w3.org/TR/activitystreams-core/#extension-round-trip)).

Untenable for other reasons (JSON-LD signing, etc).

: More detail: bytes on the wire are not JSON-LD
: proto descriptors are not powerful enough
: schema language to specify code is not powerful enough
: drops data - no no
: multi-value multi-kind example before is clunky in protolang

## Wire ABI: Solution

Solution: roll my own code generator (`astool`).

Why? Why would anyone subject themselves to this level of pain?

: Roll my own code generator
: Seems a little radical and masochistic, self-inflicted pain
: "Dude, just pick a dynamically typed language and screw golang"

## Wire ABI

* Lower major barrier to a static-typed language (& devs)
* Leverage standard libraries (`json`)
* Vocabulary understanding can be done before writing apps
* JSON-LD processing could be addressed at generation time (right now: big nope)
* Quickly produce supporting code for new specs (ex: ForgeFed)

: Well, thought it'd be cool to eliminate major barrier to static-type language
: Can use familiar standard libraries
: Vocabulary understanding: par w/ dynamic typed languages
: JSON-LD processing could be addressed at codegen time
: Don't want JSON-LD processing, PITA, too many ways to express anyways
: Lowers barrier to bringing new vocabs to static typed lang

## Wire ABI

Forgefed took a contributor a short amount of time to get generated:

.play forgefed_ex.go /BEGIN FFE1 OMIT/,/END FFE1 OMIT/ HLff

: As an example, ForgeFed
: Just waiting on Gogs or Gitea to use

## Input Schema for Code Generation

So, what to input into this tool?

: So for this tool to gen code: what is input?
: What is the format of the input?

## Input Schema for Code Generation

Yep, it's JSON-LD.

: Surprise, JSON-LD serialized data

## Input Schema for Code Generation

OWL2-notation:

.code owl2.txt

The `"type"`, `"subclassOf"`, and others help construct the triples.

: The data are schemas defined by OWL2 vocab
: This is a ForgeFed Repository type, noted by "OWL Class"
: Subclass of the ActivityStreams Object type
: Gives tool everything it needs to know to understand vocab structure

## Input Schema for Code Generation

Drawback: OWL2 itself is barely understandable.

Mitigations:

* Most people don't need to parse it, just use it
* Tool uses only a tiny amount of OWL2
* Using this tiny amount is far easier
* Only need to go deep on OWL2 if writing a codegen tool

Exercise for reader: Write the JSON-LD file for Go to generate the code to understand OWL2

: However, learning OWL2 is hard
: Absolutely sucks trying to read it
: Fortunately, for tool compatibility, copy/paste works
: only need to know OWL2 if writing a codegen tool

## Input Schema for Code Generation

JSON-LD notation: these schemas could be federated over ActivityPub.

W3C publishes the ActivityStreams schema, ForgeFed community publishes its schema, etc...

 ...and federated wikis are able to link to each other for developer discoverability.

No centralized schema-hosting place (avoid repeating history).

: Consider: these schemas are in JSON-LD syntax
: ActivityPub federates JSON-LD data
: so, what if we federate vocabulary schemas?
: Central wikis listing all known vocabs, but none is central authority
: centralized discovery, decentralized control

## Past: Design Choices - ActivityPub

: Cool thought, will return to it
: But that finishes the ActivityStreams look-back
: Now diving into ActivityPub

## Past: Design Choices - ActivityPub

Considerations for ActivityPub:

* Peering Protocol (HTTP)
* Client Code API (golang)
* Flexibility & Extendability

: ActivityPub cares about peering transport/protocol
: Library cares about client API
: Really wanted library to be piecemeal replaceable as apps grew
: The more you succeed, the less go-fed AP you need

## Peering Protocol: Transports & Handlers

HTTP is the peering protocol.

Outgoing peering: "Transports" Concept

Incoming peering: "Handlers" Concept

Still overall tied to HTTP, will take some work for future protocol support.

: HTTP is the peering protocol for ActivityPub
: This maps nicely to existing golang concepts
: AP doesn't have to be tied to HTTP
: Other things (SSB? etc) could come in future
: Will take a little code smithing to fully abstract transport out

## Client Code API: ActivityPub as Middleware

AP behavior is middleware.

.image go-fed-middleware.png _ 550

: go-fed's AP is middleware
: green and tan are go-fed logic
: white are interfaces apps satisfy
: grey boxes get to sandwich the code - hence, middleware

## Flexibility & Extendability: Building Behaviors

Prioritize dependency injection. Apps set up behaviors, data flows
through at runtime.

.code ap_setup_snippet.go /BEGIN ASS1 OMIT/,/END ASS1 OMIT/

: go-fed uses dependency injection to aggressively isolate itself
: This translates into injecting behaviors at runtime
: simple case: here is some business logic when something is created

## Flexibility & Extendability: Building Behaviors

Provide behavior upon request:

.code ap_setup_snippet.go /BEGIN ASS2 OMIT/,/END ASS2 OMIT/

The middleware will create the applicable entry in the database,
and then call back into app logic.

: Simply return the logic in a wrapper
: Wrapper does AP-specific logic, like DB creation
: Then calls business logic

## Flexibility & Extendability: Grows With Your App by Shrinking

If you want to implement AP behaviors yourself:

.code ap_setup_snippet.go /BEGIN ASS3 OMIT/,/END ASS3 OMIT/ HLint

: If app grows and needs to override the AP behaviors
: No big deal, implement it and do small change
: Lets you bootstrap quickly into prototype
: Falls away as your app matures

## Flexibility & Extendability: Composing With Others

AP alone isn't always sufficient to federate.

Compose.

Ex: `go-fed/httpsigs` for HTTP Signatures.

.code http_compose.go HLsig

: If you need more tools to federate, go-fed doesn't get in the way
: Simply use them in your impls and go-fed will still make same calls
: For HTTP signatures, can be used in transport impl, go-fed don't know

## Flexibility & Extendability: C2S & S2S

Go-fed supports C2S (Social), S2S (Federating), or both use cases.

.code use_cases.go HLpro

Note the dependency injection.

: After all that is considered, go-fed supports both AP specs
: Only difference is FederatingProtocol vs SocialProtocol
: Apps can start with one, grow to adopt the other
: The commonBehavior and Protocols inject behavior, DB provides state
: behavior + state + request = your app
: puts it all together! woot

## Present: Building Apps

: Comprehensive look at history
: focused on it a lot, to document for potential adopters
: now look at what's available at present for building apps
: not too deep, very brief
: mainly to share resources and links for voracious readers

## Present: Building Apps

go-fed tutorials: [https://go-fed.org](https://go-fed.org)

But... what else can help w/ development in general?

: Best way to dive in is on the go-fed website
: Provides yet another look over this library for you
: digs into more tech details
: if its down, ping me on mastodon

## Present: Socialhub

[https://socialhub.activitypub.rocks/](https://socialhub.activitypub.rocks/)

Where a lot of discussions take place.

: SocialHub small community of developers
: Might be useful for cross-software federating debugging, questions, etc
: Also useful for planning future action

## Present: Unofficial Testsuite

Also, I made an unofficial testsuite @ https://test.activitypub.dev/

.image testsuite.png _ 500

"Official Test Suite Down" very common GitHub issue in W3C's AP repo -- don't file more!

: For automated tests against software, developed unofficial machine-assisted testsuite
: Covers the MUSTs and SHOULDs of the AP spec decently
: The official one is down -- long standing problem
: The S2S portion of it was a questionaire, this is a bit more rigorous
: Only one or two on-your-honor questions, rest are machine-run tests
: Unofficial tool for you

## Present: Library (as in literature)

Finally, made a library (as in: for literature)

Peruse or contribute at your leisure on technical and cultural topics.

Connect with the community you're helping build.

[https://library.activitypub.dev/](https://library.activitypub.dev/)

: Then, there's the human element
: Tried to assemble some blog posts from folks
: Tiny slice of technical and nontechnical fediverse culture
: Please feel free to peruse and contribute
: Also, hope it demonstrates there's room to care about communities you help build, beyond technical

## Future: Ecosystem Improvement

: With that look of where go-fed's been and where it is, time to look towards the future
: There's a lot of future topics for AP I am interested in
: I don't have time to do them all but love seeing others push them forward
: first up, go-fed's current pitfalls & how it relates to the future

## Future: Current Library Drawbacks

* Library process requests synchronously
* Tied to HTTP more than I like
* Big ol' bloated binary: failed to make Raspberry Pi-compilable
* Requires a *lot* of work to build an AP app still, turns out "solving only AP" leaves a lot left to do

: Synchronous
: Http
: Bloated Binary (hit go compiler limits in an older version, lol)
: Still have to implement a lot of an app on your own

## Future: apcore

apcore intends to be an "on-rails" framework, in contrast to mega-minimal go-fed/activity library.

Path Forward: Builds off of go-fed.

: apcore intends to be way more handhold-y
: the path forward is to build off of go-fed

## Future: Federating Schemas/Behavior-Capabilities

Refreshing Slide 29:

*W3C publishes the ActivityStreams schema, ForgeFed community publishes its schema, etc...*

*...and federated wikis are able to link to each other for developer discoverability.*

*No centralized schema-hosting place (avoid repeating history).*

Could be extended beyond "vocab schemas" to "AP Flavors" (ex: webfinger+HTTP Signatures vs OCAP+Tor vs ...)

Similar in concept to FEDERATING.txt doc, but structured data and federated.

Path Forward: Composable with go-fed.

: repeating slide 29
: Possible path where standards communities federate
: But, they let peers' standards be discoverable on their site
: Vocabulary growth and curation
: Makes clearer which community really owns & maintains the schemas
: No single big monolith Schema organization point of failure
: But, this idea can extend beyond vocab to "AP flavors"
: More rigorous documentation of federated software
: Devs documenting their app/tools for other devs
: path forward is to compose with go-fed

## Future: Eliminating Need For DNS via Tor

DNS-centricism in ActivityPub software is a threat to users and devs alike.

Removing DNS forces division between **data authorization** and **data location**.

Have done an AP-over-Tor experiment with my personal website, but needs more work.

Removing DNS unblocks the possibility of data content-addressing. This property opens all sorts of self-sustaining, peer-to-peer, or otherwise decentralized ideas.

Path Forward: Requires go-fed changes to support.

: A pet peeve of mine is DNS
: Tying users' identities to concept of "instances" is nice for community-building
: Tying the concept of "instances" to DNS is terrible for other whole host of reasons
: AP over Tor is possible, but does open different considerations
: Consider that removing DNS unblocks, but doesn't guarantee, data that's content-addressed
: It mainly forces devs to separate data ownership from data location
: I have serious concerns about this splitting the existing Fediverse: no bueno.
: Path forward: requires go-fed changes

## Future: Towards OCAP

Solves the "data authorization" problem mentioned last slide w/ the Datashards effort.

go-fed will probably supply a library for clients to use, similar to the HTTP Signatures library.

Path Forward: Composes with go-fed.

: OCAP is "Having a secret lets me do things"
: Datashards uses that principle to facilitate data authorization
: I'm interested in implementing it for apps to use and compose with AP

## Future: Delay-Tolerant Networking

Delay-tolerant networking helps ensure data integrity as AP servers go up and down.

Not all content might want to be Delay-Tolerant, but some may want to be. More options for app-writers, the better.

Has a whole host of its own challenges, I have only simulated some Freenet-inspired networks.

Path Forward: Composes with go-fed (its own transport)

Might not be obvious why this is useful alone...

: Delay-tolerant networking delivers data as recipients go offline or online
: Not all content might want this. More options == better
: Challenging: only done some simulations based on freenet & related papers.
: I'd see this composing with go-fed as its own transport mechanism.
: Also, the "why do we want this" is not obvious

## Future: Mobile-supported P2P

Doing ActivityPub peer-to-peer with a phone as a first-class supported device.

Use Delaty-Tolerant Networking: Phones go off and online all the time, with data availability limited by ISPs/providers

Use OCAP: A way to securely do data authorization in a distributed network without needing central-authorities (no-DNS gets towards this mindset)

: Supporting mobile devices in a P2P environment is why
: Delay tolerant networking and OCAP solve problems with intermittent connectivity and limited memorystorage
: why this vision?

## Future: Mobile-supported P2P

Why phone first-class? Phones are more accessible to people than renting remote dedicated servers.

Why peer-to-peer? Bring control/freedom as close to user as possible.

Why ActivityPub? Can scale across different kinds of domains/actions (vocabularies) *and* different transport methods*.

: Phones are readily accessible to average person
: P2P scales the control/freedom to as close to user as possible
: ActivityPub scales across domains/actions (vocabularies) and ways of reliably maintaining communication

## Future: AP v2?

*"different transport methods" not permitted in original ActivityPub spec.

Permitting SSB and other non-HTTP protocols could enable different methods of federating with different properties/tradeoffs.

Who knows!

: Well the last bit of the last slide is a bit of a lie
: Current AP is tied to HTTP specifically with no mechanism for extension
: V2 extending to non-HTTP protocols like SSB would really solidify it
: App writers could choose the transport method appropriate for their app interaction
: v2 Huge topic on its own, going to leave it at that for now
: BoF session on this, please join
: Thank you!
